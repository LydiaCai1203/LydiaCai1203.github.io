<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo Cactus Theme</title>
    <link>https://lydiacai1203.github.io/</link>
    <description>Recent content on Hugo Cactus Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 22 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://lydiacai1203.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>不要太认真</title>
      <link>https://lydiacai1203.github.io/post/is_not_true/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/post/is_not_true/</guid>
      <description>最近患得患失的情绪实在是太严重了。
 也许是我意识到，生活中我开始听到一些前后不再一致的回答，也许是因为不再殷情的关心。我开始想放弃了。
 Too much I ask for.
 不是什么大事，甚至都不算什么事情，就是觉得好像人变了。告诉自己，不要看太重了，不要在乎。还是很难控制自己的情绪。总是在不对的点上。
 May be I should let him go. 对不起，也许现在的我根本不适合谈恋爱。</description>
    </item>
    
    <item>
      <title>人生的三次成长</title>
      <link>https://lydiacai1203.github.io/post/annoyement/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/post/annoyement/</guid>
      <description>周国平曾说，人生有三次成长，第一是发现自己不是世界中心的时候；第二是发现即使再怎么努力终究还是有些事令人无能为力的时候；第三是明知有些事可能会无能为力，但还是会尽力争取的时候。
 第一次听到这句话，还是 ztz 和我说的，我很怀念在 cls 的日子，虽然每天都会被 ztz 奚落，但是我知道有一个人是真心为我好，希望我成长，看着我努力。
 这几天迷上了 奇葩说，尤其特别喜欢傅首尔说的，人生海海，何必在意一时沉浮。审计系统已经告一段落，接下来的任务就是重构黑哥之前写的一个什么 安全平台。豪哥会加入后端开发，其实这个事情上周五之前就一直有响动，但是我什么都不知道，因为黑哥没有和我提过。上周五开周会的时候，黑哥提到这件事情，说后端开发现在一共四个人，会留下一个人做审计系统的运维。这个系统原来是黑哥开发的，重构肯定少不了他的参与。杨老师的 BaseHandler 深得黑哥喜欢，自然带上。豪哥自不必说。肯定是留我维护。毕竟黑哥对我不满意也不是一两天了，而我也不再是那个刚开始工作的我了，只觉得真实展现自我就好。
 就像豪哥说的，项目经验多一点也是好的。只不过现在的处境是，既没学到什么干货，也没有什么项目经验，还要被“边缘化”去做项目运维。这件事曾经让我的心情变得很不好。我很想抱怨，觉得很委屈，但是我不知道怎么抱怨，我无法无视自己的错误。我不是一点错都没有，组长水平不怎么样，可是我的水平更差。有些话春玲说的也是对的，不是每个项目都是让我学习的。可我也的确是一个自私的人，这点我自己从来不矢口否认。
 其实我自己并非不能换个角度思考。
 审计系统 整个运行流程我还不熟悉，我可以趁这段时间把它搞透。 运维就意味着我有更多的时间学习，我可以先把 shell 编程学习起来，毕竟这个我还不会。 踏踏实实地做好自己的工作，也许就够了。其它的优点我暂时没有想到，不去想了。   我知道自己对一个人的看法很难改变，特别是和黑哥已经到了这种互看不顺的地步，就觉得很烦。这大哥和别人说我 bug 多，却不说自己。老说我的代码如何如何，在他眼里我重构似乎是一件不好的事情，总记得别人的缺点，看不到别人的优点，还有很多很多，真的无力吐槽了。我不想花一个上午的时间说这些破事，但是这些是我不得不说的，我要总结，总结才会成长。把我的不开心留在这里，我精心去学习那些我还不会的知识，总有一天，选择权会在我手上。
 平稳好自己的心态，就开始努力学习吧。阿菜，加油。</description>
    </item>
    
    <item>
      <title>在博泰的最后一天</title>
      <link>https://lydiacai1203.github.io/post/last_day_in_pateo/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/post/last_day_in_pateo/</guid>
      <description>博泰最后一天。本来 last day 定在这周周末的，毕竟加了一个周末的班，想至少把自己份内的事情做完的，不过既然组长说不需要改了，我也没必要。
 很强的挫败感，就好像信心满满地走进考场，但是最后试卷上只有30分，整张纸上都是叉叉叉叉。
 遇到问题不可怕，这次选择也不代表我的能力不行。我知道不是，我也知道自己确实存在这很多很多的问题。我不想把不开心的事情再记录下来了，因为没有必要。人确实是要一直往前看的，只要记住别停下就好了。其实总结一下就是三个字“不合适”。
 其实也没必要再去深究谁好还是谁不好了，我只想把接下来的工作做好，把接下来的路走好。做自己想做的事，成为自己想成为的人就好了。</description>
    </item>
    
    <item>
      <title>Lucky Stories(2019&#43;2020)</title>
      <link>https://lydiacai1203.github.io/post/lucky_story_2019/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/post/lucky_story_2019/</guid>
      <description>四月   ztz 和 xy 离职，黄老师进组成为组长，吴奇加入。好在我已经自己写过一遍owl，不得不学会独立了。我犹记得，ztz在画系统图的时候，王叔说打算把owl交给黄老师，ztz说了一句“阿菜也可以的”。 回校进行答辩，因为艺璇没有考上研究生，所以我们大家都没有去毕业旅行。我也没去秦皇岛，一结束就回公司工作了。   五月   五一加了三天的班，为了优化正文爬虫，没有奖金。心里憋着委屈(某人走的最后一天说了太多伤人的话)，因为进度有点慢，我老出错，王叔又着急，所以就不争气哭了。哈哈哈哈，把王叔吓的一批。 吴奇把位置搬到我和王叔中间，我则是坐在了ztz之前坐的位置，这月没记错的话王叔已经开始在做之前ztz负责的二部的项目了。这个月他问了我和吴奇很多Python相关的。 24号预备党员转正啦。   六月   王叔离职。 欧阳老师知道我所有的不愉快，一直安慰和鼓励我。这个月依旧是消沉至极。他说我其实也是能好好健康长大的。面试了几家公司，面试官说我很聪明，但是他需要的是更加有经验的。大部分都是，面试过了的，然后在HR或者是总经理那一关挂了的。   七月   七月份最幸运的事情就是王叔的鼓励和支持，帮我修改简历，帮我寻找合适的机会。王叔说帮我把简历推给微软，于是我刷了一段时间的leetcode，虽然后来石沉大海，王叔说大概是因为我太应届了。王叔还与我说了一件事情，他说张天照还在的时候，他好几次向ztz问过我的水平。ztz给他的回答是，我是最聪明的。最聪明这三个字，没加上范围限定词，就很有趣。我想大概张天照说的是我比向阳聪明一点吧。然后王叔为了鼓励我，所以说成我是最聪明的。王叔说过，我是财联社唯一一个会自己解决问题的人。也说过，现在我就是财联社最聪明的。其实我不知道他说的是什么意思，但是我相信他的判断。我是最聪明的。我可以。 前两天在车站，遇到一个人和我说钱包被偷了，要借150买车票，然后我就借了。他还煞有其事地加了我的微信，然后就没有然后了。还好损失不大，希望以后自己能长一个教训。不要因为别人借的钱不多就借给别人，如果要借的数目比较大的话，他们也借不成功。有时候觉得自己好蠢&amp;hellip;.. 没有意义的善良。   八月   吴奇走了。牛逼，一年半的简历包装以后，工资基本就翻番了。 拿到了一份offer，但是还是做爬虫的，我只要了11k，但是要求试用期工资不打折。因为已经不想做爬虫了，所以拒绝了。 拒绝了王叔的一个活儿，但是我知道王叔不会小心眼的。   九月   拿到一份offer，13k，试用期9折。不过这都不重要，重要的是，面试官是个很厉害的人，或许选择这份offer会给我带来更大的成长？ 看了一部很老很老的电影，[罗生门]，可以看下这篇影评这也是一个平时判断别人说话真伪中的一个技巧点吧，就是每个人都会为了维护自己的利益中去美化一些事情，看了很多的影评，但是觉得这篇影评分析地到位。其实杀死武士的人是女人，首先樵夫站在一个第三方的角度，所说的大部分都比较可信。但是因为他拿走了价格不菲的短刀。所以所有和短刀有关的部分都是假的。因为叙事者描述事实的时候肯定是希望事情与自己无关的方向去引导别人。所有人的描述中，妻子和武士描述的都是短刀是武器。但是强盗和樵夫的描述是强盗用剑刺死了武士。武士自杀可以排除，因为樵夫的描述里，武士是软弱的，他在妻子被侮辱了以后都没有想着要报仇。妻子说自己拿着短刀就晕倒了，晕倒了两次，强盗早就走了，丈夫用鄙夷的眼神看着她，她醒来以后丈夫就死了。所以很大可能就是她是杀死的丈夫，但是不想当凶手，所以就说自己晕倒了，因为丈夫自杀是不可能的, 当时强盗已经走了。根据后来樵夫的描述，是妻子挑唆，让两个人进行厮杀的。后来两个人的武器均被打落在地，当时妻子短刀在手，两人之间必须死一个，所以极大可能是妻子拿着短刀杀了丈夫。 九月的最后一天，我离开财联社了。这次辞职学习到了很多的东西，其实我离开财联社的最主要原因，并不是因为提前转正受到阻碍。其实我知道，这中间并没有人尽力帮我。等到我真的要离开了，叶周才说可以给我提前转正，甚至把工资调到13k。非等到我要走了，才这样说，结果就是我还在试用期，说明任何一个人都没有真心想我留下来做过努力。我也见识到了大家互相甩锅的样子，叶周说是黄老师没努力，人事说是叶周不给我过。一出好戏。王叔在群里说我要离职了，ztz发了一个大拇指。我相信他这个表情是真心的。   十月   我拒绝了ws的要求。有几个原因：1. 我已经离职了，就是因为厌恶了所以不想再碰owl的东西了。2. 我现在也没那么缺钱，我不想做一些没有意义的事情，我想把时间花在有意义的事情上面。3. 每天要学要巩固的东西太多了，真的不想再花精力去搞owl的东西。   十一月   博泰已成为过去，来到火币。看了廖老板还有大壮哥写的后端框架，学到了一种异常处理的方法，嘿嘿，开心。   十二月   分手 审计系统一版结束，要说学到了什么，学会了Sqlalchemy，有很多想吐槽的地方，暂时也都不提罢了。 对所谓的 简洁接口 有了一个新的认识，可我不能确定，是对的还是不对的。迷茫。    2020 我要健康 我要努力 我要买房！！！！！ 一月 </description>
    </item>
    
    <item>
      <title>Study Tips(2019&#43;2020)</title>
      <link>https://lydiacai1203.github.io/post/study_tips_2019/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/post/study_tips_2019/</guid>
      <description>1.10:57 完成了人生中第一次服务器购买以及成功地翻出了墙.
  2.解决了一个关于使用gunicorn打印不出日志的问题
  3.破解了银保监的反爬，学到很多东西
  4.将html转成pdf的简便方法，用chrome打开html，ctrl+p就可以转化成pdf了
  5.mongodb创建联合索引create_index([(field, 1), (field2, -1)])
  6.原来除了有os.system()直接执行command,还有os.popen()，原理是创建一个管道，然后可以这个管道里标准输出流里的东西拿出来，拿到return的对象，fp.read()即可，用完fp.close()
  7.遇到了一个坑，使用phantomjs的时候，比较慢，所以我希望这玩意只有一个，就弄成了全局变量，结果，发现driver.quit()失效了，根本没关闭上，这就很恶心人了。 解决方法是弄成局部变量
  8.假如问你：cookie和session的区别 你知道怎么回答吗 反正我是重新认识了cookie,而且最让我惊讶的是，问了好多同事，给我的回答竟然都是和我面试的时候是一样的回答。我有时候不禁会想，面试官在问我这个问题之前，自己是否也清楚cookie和session的区别呢&amp;hellip;..又放肆了，还是好好学习吧
  9.markdown里面如果想使用空行的话，可以使用html里面的br标签，但是要在br标签的前后都给到一个空行，在github上面显示才比较好看。或者使用空格+空格+换行，也可以达到一样的效果
  10.mysql5.6 的 最左前缀优先 和 mysql5.7 的 最左前缀优先不一样，比如说现在有一个联合索引(name, cid), 有一条查询语句：select * from tablename where cid=1;这条语句在5.6中就不会走索引，但是在5.7中会走索引
  11.今天知道一个新的markdown语法，[TOC] 可以自动按照生成目录，但是github不支持
  12.set里面允许放的是不可变对象, 什么是不可变对象(string, numbers, boolean), 同理dict的key也是。这个fluent-py里面有讲解。加入我现在有两堆对象，我想做一个交集。但是我不想用for循环一个一个去比对。这个对象的数据成员都是由基本类型组成的。对象显然是放不进set里面的，这时候只需要实现__hash__和__eq__，具体解释就不在这里写了，但是，但是，但是，你想要去比对，肯定是和__eq__有关系，所以在实现__eq__的时候，势必要结合具体的业务情况。这时候就可以愉快地做交集并集了。
  13.之前研究了网页编码，一开始都是采用了resp.text，后来发现其实requests底层使用的是resp.encoding, 这个encoding的默认值取的是response.headers里的content-type中charset这个值，如果没有这个值呢，requests就会使用chardet进行编码判断(也就是get_encoding_from_headers)后来发现这个方法呢，其实并不好用，取出来的是个ISO-8859-1，这个东西解码字节数组以后也不对。又发现有一个get_encodings_from_content,这个是从html里面的meta里面取charset这个值。有些html会有多个meta标签，所以这个函数会取出多个charset，也就是一个列表。这个就要自己取取舍了。一般我认为如果是ISO-8859-1的话，就是用UTF进行编码，如果gb打头，就是用gb18030进行编码。因为gb2312&amp;lt;\gbk&amp;lt;\gb18030。另外很多时候，会出现一种情况就是，明明charset是对的，但是使用decode(charset)的时候会报错。这是因为网页中含有一些这个编码不可以解析的字符，是什么原因我不知道，但是可以使用decode(charset, &#39;ignore&#39;)，只显示那些能编码的字符。
  14.虽然之前也遇到过supervisor装好了以后出现各种问题，今天尤其仔细地看了一下解决的方法，记录一下
  supervisord -c /etc/supervisor/supervisord.</description>
    </item>
    
    <item>
      <title>阿菜菜的骚话天地</title>
      <link>https://lydiacai1203.github.io/about/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/about/</guid>
      <description>my resume</description>
    </item>
    
    <item>
      <title>docker image的实现原理以及registry相关的一块知识</title>
      <link>https://lydiacai1203.github.io/post/analyse_image_layer/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/post/analyse_image_layer/</guid>
      <description>part_one: 什么是文件挂载？  1. Unix里面的文件目录是目录树结构的形式，所有的文件目录都是基于硬盘disk逻辑抽象出来的。比如现在有一个的一个目录。
接1. 现在要把这些文件目录挂载到磁盘上面，在linux的文件系统里面，首先执行mount命令进行文件挂载，比如说将/(根目录)挂载到disk1里面，挂载完了以后，根目录下的进行创建操作或是写操作的时候，数据文件都会存储在disk1当中。
重点来了。比如说现在在data目录下创建一个文件a.txt, 这时候将/data挂载到disk2下面，这时候disk2中是看不到a.txt的。
part_two: 联合挂载  那么既然有要挂载以后再写才能看见的挂载，肯定有写完以后再挂载依旧能够看见之前已经写了的文件的挂载方式。docker layer就是属于这种。
part_three: docker 的layer和image的关系就有点像联合目录以及挂载点  也就是说，一个image代表的就是layer中的一个挂载点，而所有的layers就像是一个联合目录。
最先进行build的layer层就在栈底，同样最后build的layer层就在栈顶。比如说现在在layer1层进行touch a.txt和touch b.txt两个动作(要注意现在图中所示的所有layer层都是read-only)。layer2层进行touch a.txt。那么这个时候整个docker image build以后，使用这个image生成的实例以后，这个实例里面存在的是哪一层的a.txt。
这就涉及到所谓的联合挂载了。也就是说当前的docker image 看得到之前的 docker image创建的全部的layers。现在请注意，接下来是重中之重，涉及image实现原理。课代表请记笔记。(我真的是个戏精)
part_three: docker image 实际上是怎么实现的  上个部分说到docker image是由很多个layer组成的，且这些layer是read-only的。每当生成一个新的实例以后，就会在栈顶增加一个writable-layer层。实际上是复制了一份read-only-layer中的数据到writable-layer中, 在container中修改的是这一层writable-layer中的数据。
好了，现在已经扯远了，回到问题上来，实际上一个docker image是由两部分组成的，分别是Manifest(layer_name list)和image_name(image_name: name:tag)
layer list中的每一个item，都是一个由hash(layer_content)=sha-256的这样一个hash值组成的。这样的hash有三个优点：1. 分布均匀；2. 碰撞少；3. 容易出现雪崩效应(所谓的雪崩效应输入值稍微改动一点点，hash值就会产生巨大的变化，这也是导致分布均匀的原因之一)。ps:Manifest也可以理解为是文件清单的意思。register(docker中的仓库)中其实存放了很多很多很多很多无序的layers。
part_four: 如何实现的layer不重复下载？  当我们build Dockerfile的时候, 首先会根据Dockerfile生成一张Manifest的表。里面存的是一堆的hash值。会根据这张表从栈顶开始查，查到栈底，这个hash值实际上可以理解为是digest, 通过和本地layer的sha-256值进行比对判断有没有必要再创建一个。
part_five: 回到一开始的问题，生成的contianer里面到底是那个layer的里的a.txt  再回到文件系统来说，启动一个容器的时候，可以看到容器里面是有一个完整的文件系统的，容器里面的所有文件都来自构成镜像的层。每个层里面都有文件。Docker通过aufs的技术，把所有的层都挂载到了同一个目录上(所以现在知道，所谓digest其实就是，把所有layer里面的文件打包压缩求hash)。 也就是这时候container会从栈顶往下开始找文件，走到layer2的时候找到了a.txt, 这时候就不会用到layer3中的a.txt, 而是加载b.txt。所以说container里面的其实是a,txt文件。</description>
    </item>
    
    <item>
      <title>what is k8s?</title>
      <link>https://lydiacai1203.github.io/post/what_is_k8s/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/post/what_is_k8s/</guid>
      <description>part_one: 基本结构介绍 Node可以理解为物理资源，在K8s里面可操作的最小单元就是Pod，我们可以通过配置Pod配置文件的template字段来控制一个Pod里面有哪几种Container，但是不能控制一个Pod里面有几种container。Pod配置里面的template说明了要启动的容器是怎么样的，最重要的就是image的信息。
 后来由于需要部署的服务越来越多，每个Pod都是人工手动启动或者是删除检查的。所以后来产生了ReplicaController，有了这个东西以后就可以指定每个服务所要启动的Pods。这里的selector就是现在RC管理的下，还有哪些Pod是存活的。然后template就是指的是要启动的Pod是什么样子的。
 但是后来又遇到了滚动升级的问题(滚动升级：比如现在一个服务要从v1升级到v2，当时人工的处理方法就是将v1的Replica:3-&amp;gt;Replica:2, 然后将v2的配置文件里面配上Replica:1，后续的动作依次类推)。这样也耗费了大量的人力。
 所以这时候Deployment就出现了，但是由于ReplicaController还有一些涉及的不好的地方，所以为了更好地与Deployment进行配合，于是就出现了ReplicaSet。
 所以Deployment就是控制ReplicaSet的，Deployment里面可以看见RS和Pod两个东西的内容。
 Pod在K8s里面，这是一个不稳定的东西，每次死掉以后再挂起来，Pod的IP都会发生变化。那怎么去准确地找到哪一个Pod呢？(这个和endpoint也有一点关系)但是一个服务起了多个Pod，这时候如果有流量过来应该分配给哪个Pod呢？于是就出现了Service，这个Service起到了一个所谓的负载均衡的作用。每一个Service在这个集群里都有唯一确定的IP，这样就可以找到一群Pods，然后每个Pod都由endpoint进行标识。
 但是Service还是在这个虚拟网络里面的，外面用户来的流量应该怎么对应到指定的Service上面呢。之前说到外网想要连到百度云的服务器所在的私网的时候，使用的是VPN。但是我们不可能让用户都装上一个VPN Client。都进行验证。都建立一个虚拟专用网络。所以就出现了IngressController。这个东西可以简单地理解为是Nginx，可以实现反向代理。
 外部的流量会直接访问域名通过ip查询会命中Nginx中配置当中的public ip，这时候会把流量导向Service。但是这个对应的实现就是，Ingress实际上就是一种映射机制，定义了映射规则。在IngressController里面存在这一份vhost,这个里面存在service_ip和port的映射。这样就可以实现外部网络访问内部对应的pod了。</description>
    </item>
    
    <item>
      <title>what is NFS?</title>
      <link>https://lydiacai1203.github.io/post/whatis_nfs/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/post/whatis_nfs/</guid>
      <description>part_one：一台物理机器上的文件存储  计算机里面有很多块磁盘，计算机里面的文件系统都是逻辑树状结构的，逻辑上的概念都是物理中不会出现的。一个一百兆的文件在计算机上有几种存储方法。简单地来说有两种:
1. sequence  在disk中占有一段连续的存储空间。这样做的好处有几点：一是简单方便；二是命中率高，因为程序的局部性原理。命中率高会导致读的速度比较快。但是这样做也是有坏处的，坏处就是这样存储文件容易出现磁盘碎片。因为不太容易找到100M这么大的连续存储空间。
2. Inode=index+data_node  这种方式会讲一个disk分成两个部分，一个部分是index表头，一个部分是很多很多的data node，这些data node的大小一都是可以设置的，一般的大小在4KB-&amp;gt;16KB。一个100M的文件会被分成好几个部分，被存储到不同的node里面去。然后在index表头里面做一个地址的记录。这样当把这个disk挂载到某个目录上面去的时候，文件系统要显示这个disk中的所有的文件，去找的时候就会根据这个index的表头去拼出一个完整的文件。
part_two：什么是NFS？  NFS的Network FileSystem，中文意思是分布式网络文件系统。这个出现的原因是因为，当目录下的文件非常多的时候，有可能会出现一个物理机里的磁盘存不下的情况。所以这种时候就出现了NFS。
拿一个例子来讲，所有远程registry里面的images的layers都是乱序的，且不可能只是存在于一台物理机上面。
1. 首先layers很多很多，不够存。
2. 其次就是必须看见的是一个文件系统，因为layer是被image各种交叉引用的。现在有一个NFS,做了一层隔离，一个文件可能分成几块存在不同的物理机的disk上面，然后这个NFS在显示文件目录下面的挂载情况的时候会将所有的物理机磁盘里的文件拼在一起展示在挂载的文件目录里面。造成一种假象。
3. NFS只是一种协议规范，真正实现这种规范的有GFS, GlusterFS, MooseFS等等，其中MooseFS就是所说的MFS，也就是公司现在用的这种分布式网络文件系统。
part_three: 磁盘阵列的好处  磁盘阵列会在你将数据写入一个磁盘的时候，同时同步到另一个磁盘上去。这样读写文件的速度就会变成两倍速。一个磁盘上从头开始读。另一个磁盘上从百分之五十的地方开始读数据。那可不可以说设置两个指针，一个在文件头，一个在文件尾进行读写呢，这样做会收到磁盘吞吐量的约束，所以也是一种有问题的做法。</description>
    </item>
    
    <item>
      <title>看完 天龙八部 以后，有一点骚话想说</title>
      <link>https://lydiacai1203.github.io/post/movie_tlbb/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lydiacai1203.github.io/post/movie_tlbb/</guid>
      <description>我大概是疯了，从周日开始看到周一凌晨，终于把《天龙八部》给刷完了。
 虚竹的故事线一条下来，我也觉得尚能接受。分支故事线应该就是天山童姥和李秋水，为了无崖子，一个划花对方的脸，一个在对方修炼神功的时候搞偷袭，还都觉得无崖子喜欢自己，结果无崖子喜欢的是李家小妹。虚竹也是个挂比，也算积善缘得善果，珍珑棋局为了救段延之误下一子，然后得段延之相助破解了珍珑棋局，得到了无崖子七十多年来的深厚内力，最后又因为一颗救人积善之心，结缘童姥，学会天山折梅手和天山六阳掌。也是因为阻止童姥和李秋水掐架最后误打误撞得到两人的内力，最后成为灵鹫宫主人。这样一个挂比小和尚，金庸也要给他安排上一段香艳场景，虽然梦姑梦郎终成眷属，但我总觉得冰窖中的那段描写像是一种意淫。虚竹的身世似乎也必须离奇，原来是玄慈与叶二娘的儿子，一天之内与父母相认，又一天之内失去双亲。
 段誉也是一个名副其实的挂比+一个情商巨高的舔狗。先是因为救钟灵被灵鹫宫天使打落悬崖误打误撞习得凌波微步，接着又因为回头寻找小黑马主人而结识木婉清，去救木婉清的时候又把北冥神功给学会了，一不小心就吸了这个，吸了那个。跪舔王语嫣又别出心裁，不像宋青书那个蠢猪，当准备用六脉神剑下死招给慕容复的时候，还想到王姑娘会不会因此而不开心，可是宋青书这个蠢猪在张无忌身负重伤别人都不好意思上千补刀的时候，他还不自量力地想把张无忌干死。可谓是舔狗中的失败范例。同为舔狗的还有游坦之和阿紫，因为舔错了方式，而无法和自己心爱的人在一起。段誉还真的和段正淳一样，风流多情，原来三个爱人都是段正淳的女儿，正当我以为段誉要孤独一生的时候，故事又峰回路转，段誉竟然是段延之的儿子。我tm&amp;hellip;
 自带音响的男人乔峰（萧峰）在喝断义酒的时候我真的心里难过极了，就不说了，大英雄谁都喜欢。虽然我看不太懂他为什么会爱上阿朱。
 如果要我说我最喜欢谁，我应该最喜欢的是鸠摩智，典型的学霸，虽然有一丢丢急功近利，但是最后大彻大悟成为得道高僧也是相当有悟性有天赋的人，也是金庸没有给安排什么奇怪的感情线的人，所以我喜欢他。
 就这样吧，我感觉金庸的其它作品我短期内应该都不会再去看了。</description>
    </item>
    
  </channel>
</rss>